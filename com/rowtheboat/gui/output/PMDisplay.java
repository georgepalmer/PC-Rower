/*
 * PC-Rower	PC-Rower is a piece of software that allows the connection of a Concept II rowing
 * 			machine to a PC to provide real-time and post workout analysis of performance.
 * Copyright (C) 2003-2005 George Palmer
 * 
 * 
 * This file is part of PC-Rower.  PC-Rower is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License(GPL) as published by the Free 
 * Software Foundation; either version 2 of the License, or (at your option) any later version.  
 * Under the GPL any derivations or alterations of this software must keep this header intact.
 * 
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License along with this program; if
 * not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, 
 * MA 02111-1307 USA
 * 
 * The author may be contacted at feedback@rowtheboat.com
 */
 
 
 /*
 * File: PMDisplay.java
 * 
 * Date			Version		User		Description
 * 19-Nov-2003	1.0			GeorgeP		Initial version coded
 * 15-Oct-2004	1.02		GeorgeP		Changed to pace output
 * 
 */
 
package com.rowtheboat.gui.output;

import com.rowtheboat.gui.OptionsSingleton;
import com.rowtheboat.input.StrokeData;

import org.eclipse.swt.SWT;
import org.eclipse.swt.graphics.Font;
import org.eclipse.swt.graphics.FontData;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Canvas;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Label;

import com.rowtheboat.controller.StrokeCollection;

import com.rowtheboat.workout.Workout;

/**
 * This class handles the PMDisplay output
 * 
 * @author GeorgeP
 */

public class PMDisplay extends Canvas implements IGUIOutputDevice {

	/* Class Variables */

	private int rowerNumber = 0;					/* The boat to display data for */
	private Workout workout;						/* The number of boats there are */

	private Label splitLabel;						/* The split label */
//	/* The text fields - auto generated by GUI builder */
//	private Text spmText;
//	private Text timeText;
//	private Text distanceText;
//	private Text powerText;
//	private Text caloriesText;
//	private Text splitText;
//	private Text hrText;
	

	/* Constructor */

	/**
	 * Constructs the PMDisplay instance
	 * 
	 * @param parent		the parent of the canvas
	 * @param style			the style of the canvas
	 * @param numberOfBoats	the number of boats in the workout
	 */
	public PMDisplay(Composite parent, int style, Workout workout) {
		
		/* Call the Canvas constructor and set the class variables */
		super(parent, style);
		this.workout = workout;
		
		/* Setup the content */
		setupLayout();
		constructTextAndLabels();
	}
	
	
	/* Public Methods */
	
	/* Inherited Javadoc */
	public void chooseRowerToDisplay(int [] rowers) {
		
		/* This is for one rower only, so the first rower is taken */
		int rowerNo = rowers[0];
		
		/* Check the number is valid, if not use the default */
		if ( rowerNo >= 0 && rowerNo <= workout.numberOfRowers() ) {
			rowerNumber = rowerNo;
		}
		else {
			rowerNumber = 0;
		}
	}
	
	
	/* Inherited javadoc */
	public void displayCount(byte time) throws Exception {
		
		/* Not required - although could have PM2+ mimicking countdown */	
	}
	

	/* Inherited Javadoc */
	public void guiResized() {/* This isn't really needed for this class */};
	
	
	/* Inherited Javadoc */
	public void startRowing(int startType) {
		/* Nothing required in this implementation */		
	}
	
	
	/* Inherited Javadoc */
	public void updateStrokeData(StrokeCollection strokes) {
		
		/* Find the stroke for the given rower */
		StrokeData stroke = strokes.getStroke(rowerNumber);
		
		String split = "" + stroke.get500Split();
		split = split.replace('.',':');
		
		splitLabel.setText(split);
		splitLabel.update();
		
//		/* Update the text boxes */
//		timeText.setText("" + stroke.getTime());
//		distanceText.setText("" + stroke.getDistance());
//		spmText.setText("" + stroke.getStrokeRate());
//		powerText.setText("" + stroke.getPower());
//		caloriesText.setText("" + stroke.getCaloriesPerHour());
//		splitText.setText("" + stroke.get500Split());
//		hrText.setText("" + stroke.getHeartRate());

		/* This must be called to trigger updates */
		this.update();
		
		/* A garbage collection is used so that the memory usage associated with an update is kept
		 * down. */
		OptionsSingleton.getInstance().garbageCollect();
	}
	
	
	/* Inherited Javadoc */
	public void workoutAborted() {
		
		/* Do nothing */
	}
	
	
	/* Inherited Javadoc */
	public void workoutFinished(StrokeCollection strokes) {
		
//		/* If it's a distance workout then we need a special update, else use the normal one. */
//		if (workout.getType() == Workout.DISTANCE_WORKOUT) {
//			/* Find the stroke for the given rower */
//			StrokeData stroke = strokes.getStroke(rowerNumber);
//			
//			/* In a distance workout when the workout is finished, the distance field returns the 
//		 	* exact time taken to cover the distance */
//			timeText.setText("" + stroke.getDistance());
//			distanceText.setText("" + workout.getDistance());
//			
//			/* Note other fields not updated but this doesn't matter as do averages below */
//		}
//		else {
//			updateStrokeData(strokes);
//		}
		
		/* Could change other fields to averages here */
	}
	
	
	/* Private Methods */
	
	/**
	 * Constructs the text and labels that display the PM data.  Auto generate by GUI Builder
	 */
	private void constructTextAndLabels() {
		
		Label splitLabelName = new Label(this, SWT.NONE);
		splitLabelName.setText("Split  ");
		splitLabelName.setFont( new Font(this.getDisplay(), 
				new FontData( OptionsSingleton.getInstance().getOSDependentFont(), 40, SWT.BOLD )) );
		
		splitLabel = new Label(this, SWT.NONE);
		GridData sgridData = new GridData();
		sgridData.heightHint = 50;
		sgridData.widthHint = 200;
		splitLabel.setLayoutData(sgridData);
		splitLabel.setFont( new Font(this.getDisplay(), 
			new FontData( OptionsSingleton.getInstance().getOSDependentFont(), 40, SWT.BOLD )) );
//		{
//			final Label label = new Label(this, SWT.NONE);
//			label.setText("Time");
//		}
//		{
//			timeText = new Text(this, SWT.BORDER);
//			final GridData gridData = new GridData(GridData.HORIZONTAL_ALIGN_FILL);
//			timeText.setLayoutData(gridData);
//		}
//		{
//			final Label spmLabel = new Label(this, SWT.NONE);
//			spmLabel.setText("SPM");
//		}
//		{
//			spmText = new Text(this, SWT.BORDER);
//			final GridData gridData = new GridData(GridData.HORIZONTAL_ALIGN_FILL);
//			spmText.setLayoutData(gridData);
//		}
//		{
//			final Label label = new Label(this, SWT.NONE);
//			label.setText("Distance");
//		}
//		{
//			distanceText = new Text(this, SWT.BORDER);
//			final GridData gridData = new GridData(GridData.HORIZONTAL_ALIGN_FILL);
//			distanceText.setLayoutData(gridData);
//		}
//		{
//			final Label label = new Label(this, SWT.NONE);
//			label.setText("Power");
//		}
//		{
//			powerText = new Text(this, SWT.BORDER);
//		}
//		{
//			final Label label = new Label(this, SWT.NONE);
//			label.setText("500 Split");
//		}
//		{
//			splitText = new Text(this, SWT.BORDER);
//			final GridData gridData = new GridData();
//			splitText.setLayoutData(gridData);
//		}
//		{
//			final Label label = new Label(this, SWT.NONE);
//			label.setText("Calories/Hour");
//		}
//		{
//			caloriesText = new Text(this, SWT.BORDER);
//			final GridData gridData = new GridData();
//			caloriesText.setLayoutData(gridData);
//		}
//		{
//			final Label label = new Label(this, SWT.NONE);
//			label.setText("HR");
//		}
//		{
//			hrText = new Text(this, SWT.BORDER);
//			final GridData gridData = new GridData(GridData.HORIZONTAL_ALIGN_CENTER);
//			gridData.horizontalAlignment = SWT.LEFT;
//			hrText.setLayoutData(gridData);
//		}
	}
	
	
	/**
	 * Setup the layout for the canvas
	 */
	private void setupLayout() {
		
		GridLayout layout = new GridLayout();
		layout.numColumns = 14;
		
		this.setLayout(layout);
	}
}